use std::mem;

#[cfg(target_arch = "x86_64")]
use std::arch::x86_64::*;

use std::fs::File;
use std::io::{BufRead, BufReader};

const X: [usize; 2] = [0, 4];
const Y: [usize; 2] = [1, 5];
const Z: [usize; 2] = [2, 6];

const ROT: [i32; 6] = [0xE4, 0xD8, 0xE1, 0xC9, 0xD2, 0xC6];

#[inline(always)]
fn read_xv(pv: &__m256i) -> (i32, i32, i32, i32, i32, i32, i32, i32) {
    unsafe {
        let r: (i32, i32, i32, i32, i32, i32, i32, i32) = mem::transmute(*pv);
        r
    }
}

fn read_xv_as_vec(pv: &__m256i) -> Vec<i32> {
    let mut rv: Vec<i32> = Vec::with_capacity(8);

    unsafe {
        let r: (i32, i32, i32, i32, i32, i32, i32, i32) = mem::transmute(*pv);
        rv.push(r.0);
        rv.push(r.1);
        rv.push(r.2);
        rv.push(r.3);
        rv.push(r.4);
        rv.push(r.5);
        rv.push(r.6);
        rv.push(r.7);
    }
    rv
}

#[inline(always)]
fn negate(vx: &mut __m256i, mask: __m256i) -> &mut __m256i {
    unsafe {
        *vx = _mm256_sign_epi32(*vx, mask);
    }
    vx
}

#[inline(always)]
fn shuffle(vx: &mut __m256i, mask_idx: usize) -> &mut __m256i {
    match mask_idx {
        0 => {
            unsafe {
                *vx = _mm256_shuffle_epi32(*vx, ROT[0]);
            }
        },
        1 => {
            unsafe {
                *vx = _mm256_shuffle_epi32(*vx, ROT[1]);
            }
        },
        2 => {
            unsafe {
                *vx = _mm256_shuffle_epi32(*vx, ROT[2]);
            }
        },
        3 => {
            unsafe {
                *vx = _mm256_shuffle_epi32(*vx, ROT[3]);
            }
        },
        4 => {
            unsafe {
                *vx = _mm256_shuffle_epi32(*vx, ROT[4]);
            }
        },
        5 => {
            unsafe {
                *vx = _mm256_shuffle_epi32(*vx, ROT[5]);
            }
        },
        _ => {
            unsafe {
                *vx = _mm256_setzero_si256();
            }
        },
    }
    vx
}

fn main() {
    let f = File::open("./input.txt").expect("Unable to open input file");
    let f = BufReader::new(f);
    
    let mut mult: Vec<__m256i> = Vec::with_capacity(8);
    unsafe {
        mult.push(_mm256_setr_epi32(1, 1, 1, 99, 1, 1, 1, 33));
        mult.push(_mm256_setr_epi32(1, 1, -1, 99, 1, 1, -1, 33));
        mult.push(_mm256_setr_epi32(1, -1, 1, 99, 1, -1, 1, 33));
        mult.push(_mm256_setr_epi32(1, -1, -1, 99, 1, -1, -1, 33));
        mult.push(_mm256_setr_epi32(-1, 1, 1, 99, -1, 1, 1, 33));
        mult.push(_mm256_setr_epi32(-1, 1, -1, 99, -1, 1, -1, 33));
        mult.push(_mm256_setr_epi32(-1, -1, 1, 99, -1, -1, 1, 33));
        mult.push(_mm256_setr_epi32(-1, -1, -1, 99, -1, -1, -1, 33));
    }

    let rots: [[usize; 2]; 24] = [[0,0], [1,2], [0,3], [1,1],
                                  [0,6], [1,4], [0,5], [1,7],
                                  [3,0], [2,2], [3,3], [2,1],
                                  [3,6], [2,4], [3,5], [2,7],
                                  [4,0], [5,2], [4,3], [5,1],
                                  [4,6], [5,4], [4,5], [5,7]];

    let cmp_mask: __m256i;
    unsafe {
         cmp_mask = _mm256_setr_epi32(1, 1, 1, 0, 1, 1, 1, 0);
    }

    let mut scanners: Vec<Vec<__m256i>> = Vec::with_capacity(64);
    
    {
        let mut cs: usize = 0;
        let mut pc: usize = 0;
        let mut tpv: Vec<__m256i>;
        let mut txv: __m256i;
        let mut ibuf: [i32; 3] = [0, 0, 0];
        let mut bbuf: bool = false;

        for line in f.lines() {
            let line = line.expect("Unable to read line");
            
            if line.trim().is_empty() {
                continue;            
            }

            if line.get(0..=1).unwrap() == "--" {
                tpv = Vec::with_capacity(16);
                cs = scanners.len();
                pc = 0;
                scanners.push(tpv);
                //println!("Beginning scanner {}", cs);
            }
            else {
                let ts: Vec<i32> = line.split(",").map(|s| s.parse::<i32>().unwrap()).collect();
                //println!("Reading input line for cs {}, ts: {:?}", cs, ts);

                if pc % 2 == 0 && cs != 0 {
                    ibuf = [ts[0], ts[1], ts[2]];
                    bbuf = true;
                    //println!("Buffering for pair {} ibuf: {:?}", pc, ibuf);
                    pc += 1;
                }
                else {
                    if cs > 0 {
                        unsafe {
                            txv = _mm256_setr_epi32(ibuf[0], ibuf[1], ibuf[2], 33, ts[0], ts[1], ts[2], 99);                        
                        }
                    }
                    else {
                        unsafe {
                            txv = _mm256_setr_epi32(ts[0], ts[1], ts[2], 11, ts[0], ts[1], ts[2], 22);
                        }
                    }
                    //println!("Got AVX2 vector for pair {} txv: {:?}", pc, txv);
                    scanners[cs].push(txv);
                    bbuf = false;
                    pc += 1;
                }         
            }
        }

        if bbuf {
            unsafe {
                txv = _mm256_setr_epi32(ibuf[0], ibuf[1], ibuf[2], 33, i32::MIN, i32::MIN, i32::MIN, 99);                        
            }
            scanners[cs].push(txv);
        }
    }

    // Compute scanner 0 point distances
    let mut s0_dist: Vec<Vec<__m256i>> = Vec::with_capacity(32);

    for i in 0..scanners[0].len() {
        let mut tv: Vec<__m256i> = Vec::with_capacity(32);

        for j in 0..scanners[0].len() {
            unsafe {
                tv.push(_mm256_sub_epi32(scanners[0][j], scanners[0][i]));
            }
        }
        s0_dist.push(tv);
    }

    // Compare scanner 0 with all other scanners
    'smatch: for si in 1..scanners.len() {

        // for each given rotation
        'rmatch: for ri in 0..24 {
            
            // get a local copy for rotation & appropriate negation
            let mut rscanner: Vec<__m256i> = scanners[si].clone();

            // rotate the points
            for pi in 0..rscanner.len() {
                shuffle(&mut rscanner[pi], rots[ri][0]);
                negate(&mut rscanner[pi], mult[rots[ri][1]]);
                println!("rot: {:?}", read_xv(&rscanner[pi]));
            }

            // calculate the distances between the rotated points
            let mut rdist: Vec<Vec<__m256i>> = Vec::with_capacity(16);

            for i in 0..rscanner.len() * 2 {
                let mut tv: Vec<__m256i> = Vec::with_capacity(16);
                let tdv: __m256i;
                let tpv = read_xv(&rscanner[i/2]);

                if i % 2 == 0 {
                    unsafe {
                        tdv = _mm256_setr_epi32(tpv.0, tpv.1, tpv.2, tpv.3, tpv.0, tpv.1, tpv.2, tpv.3);
                    }
                }
                else {
                    unsafe {
                        tdv = _mm256_setr_epi32(tpv.4, tpv.5, tpv.6, tpv.7, tpv.4, tpv.5, tpv.6, tpv.7);
                    }
                }
                
                for j in 0..rscanner.len() {                    
                    unsafe {
                        tv.push(_mm256_sub_epi32(rscanner[j], tdv));
                    }
                }
                rdist.push(tv);
            }

            for i in 0..s0_dist.len() {
                for j in 0..rdist.len() {
                    let mut bmatches: usize = 0;

                    for ii in 0..s0_dist[i].len() {
                        for ij in 0..rdist[j].len() {
                            let cmpv: __m256i;
                            unsafe {
                                cmpv = _mm256_and_si256(_mm256_cmpeq_epi32(s0_dist[i][ii], rdist[j][ij]), cmp_mask);
                            }
                            let cmp_un = read_xv_as_vec(&cmpv);
                            let mut matches: usize = 0;

                            for zzz in 0..cmp_un.len() {
                                if cmp_un[zzz] != 0 {
                                    matches += 1;
                                }
                            }

                            if matches >= 3 {
                                println!("Found match");
                                bmatches += 1;
                            }                            
                        }
                    }

                    if bmatches >= 12 {
                        panic!("We found 12!");
                    }
                    else {
                        println!("Only found {} matches", bmatches);
                    }
                }
            }
        }
        panic!("Could not find a rotational match for scanner {}", si);
    }
    
    println!("Test expansion: {:?}", read_xv(&scanners[0][0]));
    println!("Test expansion: {:?}", read_xv(&scanners[1][0]));
    
    /*
    let mut test_xv: __m256i;

    for i in 0..6 {
        test_xv = shuffle(&scanners[0][0], i);

        println!("Test rotation i={} vector: {:?}", i, test_xv);
        println!("Test rotation i={} expansion: {:?}", i, read_xv(&test_xv));
    }

    for i in 0..8 {
        unsafe {
            test_xv = _mm256_sign_epi32(scanners[0][0], mult[i]);
        }
        println!("Test multiplication i={} vector: {:?}", i, test_xv);
        println!("Test multiplication i={} expansion: {:?}", i, read_xv(&test_xv));
    }
    */

    //println!("The max magnitude is {:?}", sums.iter().max());
}